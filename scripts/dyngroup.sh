#!/bin/bash

# Input file containing group names (and other fields, which are ignored)
INPUT="dyngroups.txt"
# Output LDIF file path
OUTPUT="../ldifs/01-dyngroup.ldif"

# Generates the LDIF file header with instructions and metadata
generate_header() {
  echo "# OpenLDAP Dynamic Groups LDIF File"
  echo "# Generated by dyngroup.sh on $(date)"
  echo "#"
  echo "# This file can be imported into OpenLDAP using ldapadd:"
  echo "# ldapadd -x -D \"cn=admin,dc=example,dc=com\" -w your_admin_password -f <this_file.ldif>"
  echo "#"
  echo "# Ensure that your LDAP schema supports the 'groupOfURLs' objectClass"
  echo "# and that your user entries have an 'employeeType' attribute."
  echo ""
}

# Generates LDIF entry for a single group
generate_group_ldif() {
  local line="$1"
  # Extract group name (first field before comma), trim whitespace
  local group=$(echo "$line" | cut -d',' -f1 | xargs)
  # Escape spaces for DN
  local dn_group=$(echo "$group" | sed 's/ /\\ /g')
  echo "# --- Dynamic Group: $group ---"
  echo "dn: cn=$dn_group,ou=groups,dc=example,dc=com"
  echo "objectClass: groupOfURLs"
  echo "cn: $group"
  echo "memberURL: ldap:///ou=users,dc=example,dc=com??sub?(&(objectClass=inetOrgPerson)(employeeType=$group))"
  echo ""
}

# Generates the LDIF file footer
generate_footer() {
  echo "# --- End of LDIF File ---"
}

# Main script logic
main() {
  # Write header to output file
  generate_header > "$OUTPUT"
  # Read each line from input file
  while IFS= read -r line || [ -n "$line" ]; do
    # Clean up line (remove carriage returns, trim whitespace)
    line="$(echo "$line" | tr -d '\r' | xargs)"
    # Skip empty lines and comments
    [[ -z "$line" || "$line" =~ ^# ]] && continue
    # Write group LDIF entry
    generate_group_ldif "$line" >> "$OUTPUT"
  done < "$INPUT"
  # Write footer to output file
  generate_footer >> "$OUTPUT"
}

main
