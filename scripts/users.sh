#!/bin/bash

# Input file containing group and user information
INPUT="dyngroups.txt"
# Output LDIF file path
OUTPUT="../ldifs/00-root.ldif"

# Generates the header for the LDIF file
generate_header() {
  echo "# OpenLDAP Users LDIF File"
  echo "# Generated by users.sh on $(date)"
  echo "#"
  echo "# This file can be imported into OpenLDAP using ldapadd:"
  echo "# ldapadd -x -D \"cn=admin,dc=example,dc=com\" -w your_admin_password -f <this_file.ldif>"
  echo "#"
  echo "# Ensure that your LDAP schema supports the 'inetOrgPerson' objectClass"
  echo "# and that required user attributes are present."
  echo ""
}

# Generates the LDIF header entries for the domain and organizational units
generate_ldif_header() {
  cat <<EOF
dn: dc=example,dc=com
objectClass: dcObject
objectClass: organization
dc: example
o: example

dn: ou=users,dc=example,dc=com
objectClass: organizationalUnit
ou: users

dn: ou=groups,dc=example,dc=com
objectClass: organizationalUnit
ou: groups
EOF
}

# Generates a single user entry for the LDIF file
# Arguments:
#   $1 - group name
#   $2 - lowercased group name
#   $3 - user number
#   $4 - uidNumber
#   $5 - gidNumber
generate_user_entry() {
  local group_name="$1"
  local lower_group_name="$2"
  local user_num="$3"
  local uid_counter="$4"
  local gid_counter="$5"

  local user_num_formatted
  user_num_formatted=$(printf "%d" "$user_num")
  local user_cn="${group_name} User${user_num_formatted}"
  local user_uid="${lower_group_name}user${user_num_formatted}"
  local user_sn="${group_name:0:3}${user_num_formatted}"

  cat <<EOF

dn: cn=${user_uid},ou=users,dc=example,dc=com
cn: ${user_cn}
cn: ${user_uid}
sn: ${user_sn}
objectClass: inetOrgPerson
objectClass: posixAccount
objectClass: shadowAccount
employeeType: ${group_name}
uid: ${user_uid}
userPassword: password
uidNumber: ${uid_counter}
gidNumber: ${gid_counter}
homeDirectory: /home/${user_uid}
mail: ${user_uid}@example.com
EOF
}

# Processes each group and generates user entries
process_groups() {
  local uid_counter=1100
  local gid_counter=1100

  # Read each line from the input file
  while IFS=',' read -r group_name num_users _; do
    group_name=$(echo "$group_name" | xargs)
    num_users=$(echo "$num_users" | xargs | tr -d '\r')
    lower_group_name=$(echo "$group_name" | tr '[:upper:]' '[:lower:]')

    # Skip empty group names
    if [ -z "$group_name" ]; then
      continue
    fi

    # Generate user entries for the group
    for i in $(seq 1 "$num_users"); do
      generate_user_entry "$group_name" "$lower_group_name" "$i" "$uid_counter" "$gid_counter"
      uid_counter=$((uid_counter + 1))
      gid_counter=$((gid_counter + 1))
    done
  done < "$INPUT"
  # Write footer to output file
  generate_footer >> "$OUTPUT"
}

# Generates the LDIF file footer
generate_footer() {
  echo ""
  echo "# --- End of LDIF File ---"
}

# Main function to orchestrate LDIF file generation
main() {
  {
    generate_header
    generate_ldif_header
    process_groups
  } > "$OUTPUT"
  echo "LDIF file generated: $OUTPUT"
}

# Run the main function
main
